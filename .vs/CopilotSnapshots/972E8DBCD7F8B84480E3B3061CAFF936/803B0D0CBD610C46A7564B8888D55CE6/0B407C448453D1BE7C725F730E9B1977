using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using BoatLoadingChecker.Server.Models;
using System.Text.RegularExpressions;
using System.IO;
using UglyToad.PdfPig;
using System.Linq;
using System.Globalization;

namespace BoatLoadingChecker.Server.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BoatParserController : ControllerBase
    {
        private static readonly IFormatProvider InvariantCulture = CultureInfo.InvariantCulture;

        [HttpPost("parse")]
        public async Task<ActionResult<BoatData>> ParsePdf(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded.");

            string text;
            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                using var pdf = PdfDocument.Open(memoryStream);
                text = string.Join("\n", pdf.GetPages().Select(p => p.Text));
            }

            try
            {
                var data = new BoatData();

                // Extract Name and IMO with more flexible pattern
                var nameImoMatch = Regex.Match(text, @"(?:1\.2|Name).*?[:\s]+(.+?)\s*\((\d{7,})\)", RegexOptions.IgnoreCase);
                if (nameImoMatch.Success)
                {
                    data.NameImo = $"{nameImoMatch.Groups[1].Value.Trim()} ({nameImoMatch.Groups[2].Value})";
                }

                // Extract Length Overall with more flexible pattern
                var loaMatch = Regex.Match(text, @"(?:1\.27|Length overall|LOA).*?[:\s]+([\d,.]+)\s*(?:Metres|M)", RegexOptions.IgnoreCase);
                if (loaMatch.Success)
                {
                    data.LengthOverall = ParseFloat(loaMatch.Groups[1].Value);
                }

                // Extract Parallel Body measurements with improved pattern
                ExtractParallelBodyData(text, data);

                // Extract Freeboard Summer with more flexible pattern
                var freeboardMatch = Regex.Match(text, @"Summer:\s*([\d,.]+)\s*Metres.*?([\d,.]+)\s*Metres.*?([\d,]+)", RegexOptions.IgnoreCase);
                if (freeboardMatch.Success)
                {
                    data.FreeboardSummer = ParseFloat(freeboardMatch.Groups[1].Value);
                    data.SummerDeadweight = ParseInt(freeboardMatch.Groups[3].Value);
                }

                // Extract Manifold Height with more flexible pattern
                var manifoldMatch = Regex.Match(text, @"8\.24.*?Manifold height.*?[:\s]+([\d,.]+)\s*Metres\s*([\d,.]+)\s*Metres", RegexOptions.IgnoreCase);
                if (manifoldMatch.Success)
                {
                    data.ManifoldHeight.NormalBallast = ParseFloat(manifoldMatch.Groups[1].Value);
                    data.ManifoldHeight.SummerDWT = ParseFloat(manifoldMatch.Groups[2].Value);
                }

                // Extract Cargo Capacity with more flexible pattern
                var cargoMatch = Regex.Match(text, @"(?:8\.2a|Cargo Capacity).*?98[%\s]+.*?([\d,.]+)\s*(?:Cu\.|Cubic)\s*Metres", RegexOptions.IgnoreCase);
                if (cargoMatch.Success)
                {
                    data.CargoCapacity98 = ParseFloat(cargoMatch.Groups[1].Value);
                }

                return Ok(data);
            }
            catch (Exception ex)
            {
                return BadRequest($"Error parsing PDF: {ex.Message}");
            }
        }

        private static void ExtractParallelBodyData(string text, BoatData data)
        {
            var sections = new[]
            {
                ("Forward to mid-point manifold", data.ParallelBody.Forward),
                ("Aft to mid-point manifold", data.ParallelBody.Aft),
                ("Parallel body length", data.ParallelBody.Total)
            };

            foreach (var (label, measurementSet) in sections)
            {
                var pattern = $@"{Regex.Escape(label)}:?\s*([\d,.]+)\s*Metres\s*([\d,.]+)\s*Metres\s*([\d,.]+)\s*Metres";
                var match = Regex.Match(text, pattern, RegexOptions.IgnoreCase);
                
                if (match.Success)
                {
                    measurementSet.Lightship = ParseFloat(match.Groups[1].Value);
                    measurementSet.NormalBallast = ParseFloat(match.Groups[2].Value);
                    measurementSet.SummerDWT = ParseFloat(match.Groups[3].Value);
                }
            }
        }

        private static float? ParseFloat(string value)
        {
            if (string.IsNullOrWhiteSpace(value)) return null;
            value = value.Replace(",", "").Trim();
            return float.TryParse(value, NumberStyles.Any, InvariantCulture, out float result) ? result : null;
        }

        private static int? ParseInt(string value)
        {
            if (string.IsNullOrWhiteSpace(value)) return null;
            value = value.Replace(",", "").Trim();
            return int.TryParse(value, NumberStyles.Any, InvariantCulture, out int result) ? result : null;
        }
    }
}
